from typing import NoReturn, Optional, List, Union
from .dev.framebuf import FrameBuffer, Color

# mgui class
class MGuiRect(object):
    x: int
    y: int
    w: int
    h: int
    def __init__(self, x: int = ..., y: int = ..., w: int = ..., h: int = ...) -> NoReturn: ...

class MGuiEvent(object):
    event_type: int
    event_data: Optional[object]
    def __init__(self, event_type: int = ..., event_data: object = ...) -> NoReturn: ...

class MGuiContext(dict):
    ...

class MGuiView(object):
    __parent: MGuiView
    vid: Optional[str]
    config: dict
    context: MGuiContext
    is_need_render: bool
    def __init__(self, context: Optional[MGuiContext], vid: str = ...) -> NoReturn: ...
    def _set_parent(self, parent: Optional[MGuiView]) -> NoReturn: ...
    def get_parent(self) -> Optional[MGuiView]: ...
    def update_config(self, new_config: dict) -> NoReturn: ...
    def find_view_by_vid(self, vid: str) -> Optional[MGuiView]: ...
    def need_render(self, context: MGuiContext) -> bool: ...
    def render(self, context: MGuiContext, frame: FrameBuffer, area: MGuiRect) -> List[MGuiRect]:...
    def on_event(self, context: MGuiContext, event: MGuiEvent) -> bool: ...

class MGuiLayout(MGuiView):
    children: List[MGuiView]
    def append_child(self, view: Optional[MGuiView]) -> NoReturn: ...
    def remove_child(self, index: int) -> NoReturn: ...
    def index_child(self, view_or_vid: Union[MGuiView, str]) -> int: ...

class MGuiLinearLayout(MGuiLayout):
    ...